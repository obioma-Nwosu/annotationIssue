{"version":3,"file":"chunks/4409.chunk.js","mappings":"i2DAaA,IAAMA,EAAY,CAGhBC,YAAaC,IAAAA,OAAiBC,WAE9BC,SAAUF,IAAAA,QAAkBA,IAAAA,KAAeC,YAGvCE,EAAoB,SAAHC,GAAqD,IAA/CL,EAAWK,EAAXL,YAAaG,EAAQE,EAARF,SAAUG,EAAiBD,EAAjBC,kBAC5CC,GAAQC,EAAAA,EAAAA,KACZ,SAACC,GAAK,OAAKC,EAAAA,EAAUC,cAAcF,EAAOT,EAAY,GACtDY,EAAAA,IAGIC,EAAgBC,EAAAA,SAAeC,QAAQZ,GA2B7C,OAAOI,EAAMS,KAAI,SAACC,EAAMC,GACtB,IAAQlB,EAA8BiB,EAA9BjB,YAAamB,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OACrBC,EAAM,GAAHC,OAAMH,EAAI,KAAAG,OAAItB,GAAekB,GAChCK,EAAsBH,aAAM,EAANA,EACxBJ,KAAI,SAACQ,GAAM,iBAAAF,OAAgBE,EAAM,IAClCC,KAAK,KACJC,EAAYb,EAAcc,MAC5B,SAACC,GAAK,OAAKA,EAAMC,MAAM7B,cAAgBA,CAAW,IAIpD,IAAK0B,EAAW,CACd,IAAMG,EAAKC,EAAAA,EAAA,GAAQb,GAAI,IAAEM,oBAAAA,EAAqBQ,UAAWzB,IAE5C,eAATa,IACFO,EAAYZ,EAAAA,cAACkB,EAAAA,EAAeH,IAGjB,oBAATV,IACFO,EAAYZ,EAAAA,cAACmB,EAAAA,EAAoBJ,IAGtB,wBAATV,IACFO,EAAYZ,EAAAA,cAACoB,EAAAA,EAAwBL,IAG1B,iBAATV,IACFO,EAAYZ,EAAAA,cAACqB,EAAAA,EAAiBN,IAGnB,mBAATV,IACFO,EAAYZ,EAAAA,cAACsB,EAAAA,EAAmBP,IAGrB,kBAATV,IACFO,EAAYZ,EAAAA,cAACuB,EAAAA,EAAkBR,IAGpB,WAATV,GAA8B,YAATA,IACvBO,EACEZ,EAAAA,cAAA,MAAAwB,EAAA,CAAKP,UAAS,GAAAT,OAAKH,EAAI,KAAAG,OAAIC,IAA2BM,IAG5D,CAEA,OAAOH,EACHZ,EAAAA,aAAmBY,EAAW,CAC9BL,IAAAA,IAEA,IACN,GACF,EAEAjB,EAAkBL,UAAYA,EAE9B,MC3GA,ED2GA,C","sources":["webpack://webviewer-ui/./src/components/CustomizablePopup/CustomizablePopup.js","webpack://webviewer-ui/./src/components/CustomizablePopup/index.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\n\r\nimport ToolButton from 'components/ToolButton';\r\nimport ToolGroupButton from 'components/ToolGroupButton';\r\nimport ToggleElementButton from 'components/ToggleElementButton';\r\nimport ActionButton from 'components/ActionButton';\r\nimport StatefulButton from 'components/StatefulButton';\r\nimport CustomElement from 'components/CustomElement';\r\n\r\nimport selectors from 'selectors';\r\n\r\nconst propTypes = {\r\n  // The data element of the popup component.\r\n  // Used to grab button props from redux and use those props to override the existing ones, if there're any\r\n  dataElement: PropTypes.string.isRequired,\r\n  // An object that maps an item's dataElement to a functional React component\r\n  children: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n};\r\n\r\nconst CustomizablePopup = ({ dataElement, children, childrenClassName }) => {\r\n  const items = useSelector(\r\n    (state) => selectors.getPopupItems(state, dataElement),\r\n    shallowEqual,\r\n  );\r\n\r\n  const childrenArray = React.Children.toArray(children);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // give a error message in the console if a child's dataElement in the childrenArray isn't in the redux state\r\n    childrenArray.forEach((child) => {\r\n      const found = items.some(\r\n        ({ dataElement }) => dataElement === child.props.dataElement,\r\n      );\r\n      if (!found) {\r\n        const error = `\r\n        A React component with dataElement ${child.props.dataElement} won't be rendered because it isn't in the redux state. Modify initialState.js like below to fix this issue:\r\n\r\n        {\r\n          viewer: {\r\n            ...,\r\n            ${dataElement}: [\r\n              ...,\r\n              { dataElement: '${child.props.dataElement}' },\r\n            ]\r\n          }\r\n        }\r\n      `;\r\n        console.error(error.replace(/\\s+/, ''));\r\n      }\r\n    });\r\n  }\r\n\r\n  return items.map((item, i) => {\r\n    const { dataElement, type, hidden } = item;\r\n    const key = `${type}-${dataElement || i}`;\r\n    const mediaQueryClassName = hidden\r\n      ?.map((screen) => `hide-in-${screen}`)\r\n      .join(' ');\r\n    let component = childrenArray.find(\r\n      (child) => child.props.dataElement === dataElement,\r\n    );\r\n\r\n    // duplicate code in HeaderItems.js, must clean up after 6.0\r\n    if (!component) {\r\n      const props = { ...item, mediaQueryClassName, className: childrenClassName };\r\n\r\n      if (type === 'toolButton') {\r\n        component = <ToolButton {...props} />;\r\n      }\r\n\r\n      if (type === 'toolGroupButton') {\r\n        component = <ToolGroupButton {...props} />;\r\n      }\r\n\r\n      if (type === 'toggleElementButton') {\r\n        component = <ToggleElementButton {...props} />;\r\n      }\r\n\r\n      if (type === 'actionButton') {\r\n        component = <ActionButton {...props} />;\r\n      }\r\n\r\n      if (type === 'statefulButton') {\r\n        component = <StatefulButton {...props} />;\r\n      }\r\n\r\n      if (type === 'customElement') {\r\n        component = <CustomElement {...props} />;\r\n      }\r\n\r\n      if (type === 'spacer' || type === 'divider') {\r\n        component = (\r\n          <div className={`${type} ${mediaQueryClassName}`} {...props} />\r\n        );\r\n      }\r\n    }\r\n\r\n    return component\r\n      ? React.cloneElement(component, {\r\n        key,\r\n      })\r\n      : null;\r\n  });\r\n};\r\n\r\nCustomizablePopup.propTypes = propTypes;\r\n\r\nexport default CustomizablePopup;\r\n","import CustomizablePopup from './CustomizablePopup';\r\n\r\nexport default CustomizablePopup;"],"names":["propTypes","dataElement","PropTypes","isRequired","children","CustomizablePopup","_ref","childrenClassName","items","useSelector","state","selectors","getPopupItems","shallowEqual","childrenArray","React","toArray","map","item","i","type","hidden","key","concat","mediaQueryClassName","screen","join","component","find","child","props","_objectSpread","className","ToolButton","ToolGroupButton","ToggleElementButton","ActionButton","StatefulButton","CustomElement","_extends"],"sourceRoot":""}