{"version":3,"file":"chunks/2664.chunk.js","mappings":"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","sources":["webpack://webviewer-ui/./src/components/MeasurementOverlay/CustomMeasurementOverlay.js","webpack://webviewer-ui/./src/components/MeasurementOverlay/CountMeasurementOverlay.js","webpack://webviewer-ui/./src/components/MeasurementOverlay/MeasurementOverlay.js","webpack://webviewer-ui/./src/components/MeasurementOverlay/index.js","webpack://webviewer-ui/./src/components/MeasurementOverlay/MeasurementOverlay.scss","webpack://webviewer-ui/./src/components/MeasurementOverlay/MeasurementOverlay.scss?02f2"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withTranslation } from 'react-i18next';\r\nimport Icon from 'components/Icon';\r\nimport core from 'core';\r\nimport { mapAnnotationToKey, getDataWithKey } from '../../constants/map';\r\n\r\nfunction CustomMeasurementOverlay(props) {\r\n  const renderAppropriateOverlay = (type) => {\r\n    const annotationType = mapAnnotationToKey(props.annotation);\r\n    switch (annotationType) {\r\n      case 'ellipse':\r\n        return <CustomEllipseMeasurementOverlay {...props}/>;\r\n      default:\r\n        console.error(`Custom overlay for annotation type: ${type} not supported`);\r\n    }\r\n  };\r\n  return (renderAppropriateOverlay(props.type));\r\n}\r\n\r\nCustomMeasurementOverlay.propTypes = {\r\n  annotation: PropTypes.object.isRequired,\r\n  value: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  t: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction CustomEllipseMeasurementOverlay(props) {\r\n  const annotationKey = mapAnnotationToKey(props.annotation);\r\n  const { icon } = getDataWithKey(annotationKey);\r\n  const { t } = props;\r\n\r\n  // Get the Scale, Precision and Units from\r\n  // the AnnotationCreateDistanceMeasurement tool as these do not exist\r\n  // in the Ellipse annotation\r\n  const distanceMeasurementTool = core.getTool('AnnotationCreateDistanceMeasurement');\r\n  const precision = distanceMeasurementTool.defaults.Precision;\r\n  const scale = distanceMeasurementTool.defaults.Scale;\r\n  const measure = distanceMeasurementTool.Measure;\r\n  const unit = scale[1][1];\r\n\r\n\r\n  const renderScaleRatio = () => `${scale[0][0]} ${scale[0][1]} = ${scale[1][0]} ${scale[1][1]}`;\r\n\r\n  const computeRadius = () => {\r\n    const decimalPlaces = 2;\r\n    const factor = measure.axis[0].factor;\r\n    const radiusInPts = props.value(props.annotation).toFixed(decimalPlaces);\r\n    return (radiusInPts * factor).toFixed(decimalPlaces);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"measurement__title\">\r\n        {icon && <Icon className=\"measurement__icon\" glyph={icon} />}\r\n        {props.title}\r\n      </div>\r\n      <div className=\"measurement__scale\">\r\n        {t('option.measurementOverlay.scale')}: {renderScaleRatio()}\r\n      </div>\r\n      <div className=\"measurement__precision\">\r\n        {t('option.shared.precision')}: {precision}\r\n      </div>\r\n      <div className=\"measurement__value\">\r\n        {props.label}: <input className=\"lineMeasurementInput\" type=\"number\" min=\"0\" value={computeRadius()} onChange={(event) => props.onChange(event, props.annotation)}/> {unit}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nCustomEllipseMeasurementOverlay.propTypes = CustomMeasurementOverlay.propTypes;\r\n\r\nexport default withTranslation()(CustomMeasurementOverlay);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Icon from 'components/Icon';\r\nimport core from 'core';\r\nimport { mapAnnotationToKey, getDataWithKey } from '../../constants/map';\r\n\r\nCountMeasurementOverlay.propTypes = {\r\n  annotation: PropTypes.object.isRequired\r\n};\r\n\r\nfunction CountMeasurementOverlay(props) {\r\n  const annotationKey = mapAnnotationToKey(props.annotation);\r\n  const { icon } = getDataWithKey(annotationKey);\r\n  const { t } = useTranslation();\r\n  const annotationList = core.getAnnotationsList();\r\n\r\n  const measurementAnnotationsList = annotationList.filter((annotation) => {\r\n    return annotation.getCustomData('trn-is-count');\r\n  });\r\n  const annotationCount = measurementAnnotationsList.length;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"measurement__title\">\r\n        {icon && <Icon className=\"measurement__icon\" glyph={icon} />}\r\n        {t('option.measurementOverlay.countMeasurement')}\r\n      </div>\r\n      <div className=\"measurement__count\">\r\n        {t('option.measurementOverlay.count')}: {annotationCount}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CountMeasurementOverlay;","import React, { useState, useRef, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport Draggable from 'react-draggable';\r\nimport PropTypes from 'prop-types';\r\nimport core from 'core';\r\nimport { mapAnnotationToKey } from 'constants/map';\r\nimport actions from 'actions';\r\nimport selectors from 'selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport CustomMeasurementOverlay from './CustomMeasurementOverlay';\r\nimport CountMeasurementOverlay from './CountMeasurementOverlay';\r\nimport DataElements from 'constants/dataElement';\r\n\r\nimport './MeasurementOverlay.scss';\r\n\r\nconst isMouseInsideRect = (e, overlayElement) => {\r\n  if (overlayElement === null) {\r\n    return false;\r\n  }\r\n\r\n  const overlayRect = overlayElement.getBoundingClientRect();\r\n  let x; let y;\r\n  if (e.touches && e instanceof TouchEvent) {\r\n    x = e.touches[0].clientX;\r\n    y = e.touches[0].clientY;\r\n  } else {\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n  }\r\n  return (\r\n    x >= overlayRect.left &&\r\n    x <= overlayRect.right &&\r\n    y >= overlayRect.top &&\r\n    y <= overlayRect.bottom\r\n  );\r\n};\r\n\r\nconst isCountMeasurementAnnotation = (annot) => ['countMeasurement'].includes(mapAnnotationToKey(annot));\r\n\r\n// create your forceUpdate hook\r\nfunction useForceUpdate() {\r\n  const [, setValue] = useState(0); // integer state\r\n  return () => setValue((value) => value + 1); // update state to force render\r\n}\r\n\r\nconst propTypes = {\r\n  annotation: PropTypes.object,\r\n};\r\n\r\nconst MeasurementOverlay = (props) => {\r\n  const { annotation } = props;\r\n  const isDisabled = useSelector((state) => selectors.isElementDisabled(state, DataElements.MEASUREMENT_OVERLAY));\r\n\r\n  const forceUpdate = useForceUpdate();\r\n  const dispatch = useDispatch();\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [transparentBackground, setTransparentBackground] = useState(false);\r\n  const [isCreatingAnnotation, setIsCreatingAnnotation] = useState(false);\r\n  const isOpen = useSelector((state) => selectors.isElementOpen(state, DataElements.MEASUREMENT_OVERLAY));\r\n  const activeToolName = useSelector((state) => selectors.getActiveToolName(state));\r\n  const customMeasurementOverlay = useSelector((state) => selectors.getCustomMeasurementOverlay(state));\r\n  const overlayRef = useRef();\r\n  const key = mapAnnotationToKey(annotation);\r\n\r\n  const shouldShowCustomOverlay = (annot) => (!isCountMeasurementAnnotation(annot) && customMeasurementOverlay.some((overlay) => overlay.validate(annot)));\r\n\r\n  const renderOverlay = (annot, key) => {\r\n    if (shouldShowCustomOverlay(annot)) {\r\n      return (\r\n        <CustomMeasurementOverlay\r\n          annotation={annot}\r\n          {...customMeasurementOverlay.filter((customOverlay) => customOverlay.validate(annot)\r\n          )[0]}\r\n        />\r\n      );\r\n    }\r\n    if (key === 'countMeasurement') {\r\n      return <CountMeasurementOverlay annotation={annot} />;\r\n    }\r\n  };\r\n\r\n  const onMouseMove = (e) => {\r\n    const tool = core.getTool(activeToolName);\r\n\r\n    if (annotation) {\r\n      const insideRect = isMouseInsideRect(e, overlayRef.current);\r\n      let useTransparentBackground;\r\n\r\n      if (isCreatingAnnotation) {\r\n        const drawMode = core.getToolMode().getDrawMode?.();\r\n        useTransparentBackground = insideRect && drawMode !== 'twoClicks';\r\n      } else {\r\n        const annotUnderMouse = core.getAnnotationByMouseEvent(e);\r\n        useTransparentBackground = insideRect && annotUnderMouse === annotation;\r\n      }\r\n      setTransparentBackground(useTransparentBackground);\r\n      forceUpdate();\r\n    } else if (shouldShowCustomOverlay(tool.annotation)) {\r\n      dispatch(actions.openElement(DataElements.MEASUREMENT_OVERLAY));\r\n      // this.setState({ annotation: tool.annotation });\r\n      // we know we are creating an annotation at this point because tool.annotation is truthy\r\n      setIsCreatingAnnotation(true);\r\n    }\r\n  };\r\n\r\n  const onAnnotationChanged = (annotations, action) => {\r\n    // measurement overlay will open and show the annotation information when we are creating an annotation using measurement tools\r\n    // since by default we don't auto select an annotation after it's created, we close the overlay here to avoid the confusion\r\n    // where no annotation is selected but measurement overlay shows the information about the annotation we were creating\r\n    if (\r\n      action === 'add' &&\r\n      annotations.length === 1 &&\r\n      annotations[0] === annotation\r\n    ) {\r\n      dispatch(actions.closeElement(DataElements.MEASUREMENT_OVERLAY));\r\n    }\r\n\r\n    if (\r\n      action === 'modify' &&\r\n      annotations.length === 1 &&\r\n      annotations[0] === annotation\r\n    ) {\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    core.addEventListener('mouseMove', onMouseMove);\r\n    core.addEventListener('annotationChanged', onAnnotationChanged);\r\n    return () => {\r\n      core.removeEventListener('mouseMove', onMouseMove);\r\n      core.removeEventListener('annotationChanged', onAnnotationChanged);\r\n    };\r\n  }, []);\r\n\r\n  if (isDisabled || !annotation) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Draggable\r\n      cancel=\"input\"\r\n      position={position}\r\n      onDrag={(e, { x, y }) => setPosition({ x, y })}\r\n      onStop={(e, { x, y }) => setPosition({ x, y })}\r\n    >\r\n      <div\r\n        className={classNames({\r\n          Overlay: true,\r\n          MeasurementOverlay: true,\r\n          open: isOpen,\r\n          closed: !isOpen,\r\n          transparent: transparentBackground,\r\n        })}\r\n        ref={overlayRef}\r\n        data-element={DataElements.MEASUREMENT_OVERLAY}\r\n      >\r\n        {renderOverlay(annotation, key)}\r\n      </div>\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nMeasurementOverlay.propTypes = propTypes;\r\n\r\nexport default MeasurementOverlay;\r\n","import MeasurementOverlay from './MeasurementOverlay';\r\n\r\nexport default MeasurementOverlay;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".open.MeasurementOverlay{visibility:visible}.closed.MeasurementOverlay{visibility:hidden}:host{display:inline-block;container-type:inline-size;width:100%;height:100%;overflow:hidden}@media(min-width:901px){.App:not(.is-web-component) .hide-in-desktop{display:none}}@container (min-width: 901px){.hide-in-desktop{display:none}}@media(min-width:641px)and (max-width:900px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .hide-in-tablet{display:none}}@container (min-width: 641px) and (max-width: 900px){.App.is-web-component:not(.is-in-desktop-only-mode) .hide-in-tablet{display:none}}@media(max-width:640px)and (min-width:431px){.App:not(.is-web-component) .hide-in-mobile{display:none}}@container (max-width: 640px) and (min-width: 431px){.App.is-web-component .hide-in-mobile{display:none}}@media(max-width:430px){.App:not(.is-web-component) .hide-in-small-mobile{display:none}}@container (max-width: 430px){.App.is-web-component .hide-in-small-mobile{display:none}}.always-hide{display:none}.MeasurementOverlay{position:absolute;z-index:95;border-radius:4px;box-shadow:0 0 3px 0 var(--document-box-shadow);background:var(--component-background);flex-direction:column;bottom:60px;right:14px;font-size:16px;min-width:215px;padding:6px}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .MeasurementOverlay{bottom:8px;right:8px;padding:8px;font-size:14px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .MeasurementOverlay{bottom:8px;right:8px;padding:8px;font-size:14px}}.MeasurementOverlay>*{margin:6px}.MeasurementOverlay.transparent{opacity:.5;pointer-events:none}.measurement__value{display:flex;flex-direction:row}.measurement__value .distance-show{margin-left:3px;cursor:pointer}.measurement__title{display:flex;justify-content:center;align-items:center}.measurement__title .measurement__icon{margin-right:5px}.measurement__deltas{display:flex;justify-content:space-between}.lineMeasurementInput{width:50px;margin-left:4px}.length_input{margin-bottom:3px}.angle_input{margin-top:3px}.angle_input .lineMeasurementInput{width:65px}\", \"\"]);\n// Exports\nexports.locals = {\n\t\"LEFT_HEADER_WIDTH\": \"41px\",\n\t\"RIGHT_HEADER_WIDTH\": \"41px\"\n};\nmodule.exports = exports;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src/index.js??ruleSet[1].rules[1].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./MeasurementOverlay.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function (styleTag) {\r\n                function findNestedWebComponents(tagName, root = document) {\r\n                  const elements = [];\r\n\r\n                  // Check direct children\r\n                  root.querySelectorAll(tagName).forEach(el => elements.push(el));\r\n\r\n                  // Check shadow DOMs\r\n                  root.querySelectorAll('*').forEach(el => {\r\n                    if (el.shadowRoot) {\r\n                      elements.push(...findNestedWebComponents(tagName, el.shadowRoot));\r\n                    }\r\n                  });\r\n\r\n                  return elements;\r\n                }\r\n                if (!window.isApryseWebViewerWebComponent) {\r\n                  document.head.appendChild(styleTag);\r\n                  return;\r\n                }\r\n\r\n                let webComponents;\r\n                // First we see if the webcomponent is at the document level\r\n                webComponents = document.getElementsByTagName('apryse-webviewer');\r\n                // If not, we check have to check if it is nested in another webcomponent\r\n                if (!webComponents.length) {\r\n                  webComponents = findNestedWebComponents('apryse-webviewer');\r\n                }\r\n                // Now we append the style tag to each webcomponent\r\n                const clonedStyleTags = [];\r\n                for (let i = 0; i < webComponents.length; i++) {\r\n                  const webComponent = webComponents[i];\r\n                  if (i === 0) {\r\n                    webComponent.shadowRoot.appendChild(styleTag);\r\n                    styleTag.onload = function () {\r\n                      if (clonedStyleTags.length > 0) {\r\n                        clonedStyleTags.forEach((styleNode) => {\r\n                          // eslint-disable-next-line no-unsanitized/property\r\n                          styleNode.innerHTML = styleTag.innerHTML;\r\n                        });\r\n                      }\r\n                    };\r\n                  } else {\r\n                    const styleNode = styleTag.cloneNode(true);\r\n                    webComponent.shadowRoot.appendChild(styleNode);\r\n                    clonedStyleTags.push(styleNode);\r\n                  }\r\n                }\r\n              };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":["CustomMeasurementOverlay","props","type","mapAnnotationToKey","annotation","React","CustomEllipseMeasurementOverlay","console","error","concat","renderAppropriateOverlay","factor","annotationKey","icon","getDataWithKey","t","distanceMeasurementTool","core","getTool","precision","defaults","Precision","scale","Scale","measure","Measure","unit","className","Icon","glyph","title","label","min","value","axis","toFixed","onChange","event","propTypes","PropTypes","isRequired","withTranslation","CountMeasurementOverlay","useTranslation","annotationCount","getAnnotationsList","filter","getCustomData","length","MeasurementOverlay","setValue","isDisabled","useSelector","state","selectors","isElementDisabled","DataElements","MEASUREMENT_OVERLAY","forceUpdate","_slicedToArray","useState","dispatch","useDispatch","_useState4","x","y","position","setPosition","_useState6","transparentBackground","setTransparentBackground","_useState8","isCreatingAnnotation","setIsCreatingAnnotation","isOpen","isElementOpen","activeToolName","getActiveToolName","customMeasurementOverlay","getCustomMeasurementOverlay","overlayRef","useRef","key","shouldShowCustomOverlay","annot","includes","isCountMeasurementAnnotation","some","overlay","validate","onMouseMove","e","tool","useTransparentBackground","insideRect","overlayElement","overlayRect","getBoundingClientRect","touches","TouchEvent","clientX","clientY","left","right","top","bottom","isMouseInsideRect","current","_core$getToolMode$get","_core$getToolMode","drawMode","getToolMode","getDrawMode","call","annotUnderMouse","getAnnotationByMouseEvent","actions","openElement","onAnnotationChanged","annotations","action","closeElement","useEffect","addEventListener","removeEventListener","Draggable","cancel","onDrag","_ref","onStop","_ref2","classNames","Overlay","open","closed","transparent","ref","_extends","customOverlay","renderOverlay","exports","___CSS_LOADER_API_IMPORT___","push","module","id","locals","api","content","__esModule","default","options","styleTag","window","isApryseWebViewerWebComponent","document","head","appendChild","webComponents","getElementsByTagName","findNestedWebComponents","tagName","root","elements","querySelectorAll","forEach","el","shadowRoot","clonedStyleTags","i","webComponent","onload","styleNode","innerHTML","cloneNode"],"sourceRoot":""}