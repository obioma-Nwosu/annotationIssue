{"version":3,"file":"chunks/8439.chunk.js","mappings":"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","sources":["webpack://webviewer-ui/./src/components/ViewControlsOverlay/ViewControlsOverlay.js","webpack://webviewer-ui/./src/components/ViewControlsOverlay/index.js"],"sourcesContent":["import classNames from 'classnames';\r\nimport ActionButton from 'components/ActionButton';\r\nimport Button from 'components/Button';\r\nimport displayModeObjects from 'constants/displayModeObjects';\r\nimport core from 'core';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useStore } from 'react-redux';\r\nimport selectors from 'selectors';\r\nimport FlyoutMenu from '../FlyoutMenu/FlyoutMenu';\r\nimport DataElementWrapper from 'components/DataElementWrapper';\r\nimport { enterReaderMode, exitReaderMode } from 'helpers/readerMode';\r\nimport actions from 'actions';\r\nimport toggleFullscreen from 'helpers/toggleFullscreen';\r\nimport DataElements from 'src/constants/dataElement';\r\nimport { isIE11, isIOS, isIOSFullScreenSupported } from 'helpers/device';\r\n\r\nfunction ViewControlsOverlay() {\r\n  const [t] = useTranslation();\r\n  const store = useStore();\r\n\r\n  const [\r\n    totalPages,\r\n    displayMode,\r\n    isDisabled,\r\n    isReaderMode,\r\n    isMultiViewerMode,\r\n    isFullScreen,\r\n    activeDocumentViewerKey,\r\n    isMultiTab,\r\n    isMultiViewerModeAvailable,\r\n  ] = useSelector((state) => [\r\n    selectors.getTotalPages(state),\r\n    selectors.getDisplayMode(state),\r\n    selectors.isElementDisabled(state, DataElements.VIEW_CONTROLS_OVERLAY),\r\n    selectors.isReaderMode(state),\r\n    selectors.isMultiViewerMode(state),\r\n    selectors.isFullScreen(state),\r\n    selectors.getActiveDocumentViewerKey(state),\r\n    selectors.getIsMultiTab(state),\r\n    selectors.getIsMultiViewerModeAvailable(state),\r\n  ]);\r\n\r\n  const totalPageThreshold = 1000;\r\n  let isPageTransitionEnabled = totalPages < totalPageThreshold;\r\n\r\n  const documentViewer = core.getDocumentViewer();\r\n  const displayModeManager = documentViewer?.getDisplayModeManager();\r\n  if (displayModeManager && displayModeManager.isVirtualDisplayEnabled()) {\r\n    isPageTransitionEnabled = true;\r\n  }\r\n  const showCompareButton = !isIE11 && !isMultiTab && isMultiViewerModeAvailable;\r\n  const toggleCompareMode = () => {\r\n    store.dispatch(actions.setIsMultiViewerMode(!isMultiViewerMode));\r\n  };\r\n\r\n  const handleClick = (pageTransition, layout) => {\r\n    const setDisplayMode = () => {\r\n      const displayModeObject = displayModeObjects.find(\r\n        (obj) => obj.pageTransition === pageTransition && obj.layout === layout,\r\n      );\r\n      core.setDisplayMode(displayModeObject.displayMode);\r\n    };\r\n\r\n    if (isReaderMode) {\r\n      exitReaderMode(store);\r\n      setTimeout(() => {\r\n        setDisplayMode();\r\n      });\r\n    } else {\r\n      setDisplayMode();\r\n    }\r\n  };\r\n\r\n  const handleReaderModeClick = () => {\r\n    if (isReaderMode) {\r\n      return;\r\n    }\r\n    enterReaderMode(store);\r\n  };\r\n\r\n  if (isDisabled) {\r\n    return null;\r\n  }\r\n\r\n  let pageTransition;\r\n  let layout;\r\n\r\n  const displayModeObject = displayModeObjects.find((obj) => obj.displayMode === displayMode);\r\n  if (displayModeObject) {\r\n    pageTransition = displayModeObject.pageTransition;\r\n    layout = displayModeObject.layout;\r\n  }\r\n\r\n  const showReaderButton = core.isFullPDFEnabled() && core.getDocument()?.getType() === 'pdf';\r\n  // Full screen is supported in iPad OS for non-video elements, but not in iOS\r\n  const renderFullScreenToggle = () => {\r\n    if (isIOS && !isIOSFullScreenSupported) {\r\n      return null;\r\n    }\r\n    return (\r\n      <>\r\n        <DataElementWrapper\r\n          dataElement=\"viewControlsDivider3\"\r\n          className=\"divider\"\r\n        />\r\n        <DataElementWrapper\r\n          className=\"row\"\r\n          onClick={toggleFullscreen}\r\n          dataElement=\"fullScreenButton\"\r\n        >\r\n          <Button\r\n            img={isFullScreen ? 'icon-header-full-screen-exit' : 'icon-header-full-screen'}\r\n            role=\"option\"\r\n          />\r\n          <div className=\"title\">{isFullScreen ? t('action.exitFullscreen') : t('action.enterFullscreen')}</div>\r\n        </DataElementWrapper>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <FlyoutMenu\r\n      menu={DataElements.VIEW_CONTROLS_OVERLAY}\r\n      trigger={DataElements.VIEW_CONTROLS_OVERLAY_BUTTON}\r\n      ariaLabel={t('component.viewControlsOverlay')}\r\n    >\r\n      {isPageTransitionEnabled && (\r\n        <>\r\n          <DataElementWrapper\r\n            dataElement=\"pageTransitionHeader\"\r\n            className=\"type\"\r\n          >\r\n            {t('option.displayMode.pageTransition')}\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: (pageTransition === 'continuous' && !isReaderMode) })}\r\n            onClick={() => handleClick('continuous', layout)}\r\n            dataElement=\"continuousPageTransitionButton\"\r\n          >\r\n            <Button\r\n              title=\"option.pageTransition.continuous\"\r\n              img=\"icon-header-page-manipulation-page-transition-continuous-page-line\"\r\n              isActive={pageTransition === 'continuous' && !isReaderMode}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.pageTransition.continuous')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: (pageTransition === 'default' && !isReaderMode) })}\r\n            onClick={() => handleClick('default', layout)}\r\n            dataElement=\"defaultPageTransitionButton\"\r\n          >\r\n            <Button\r\n              title=\"option.pageTransition.default\"\r\n              img=\"icon-header-page-manipulation-page-transition-page-by-page-line\"\r\n              isActive={pageTransition === 'default' && !isReaderMode}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.pageTransition.default')}</div>\r\n          </DataElementWrapper>\r\n          {showReaderButton && (\r\n            <DataElementWrapper\r\n              className={classNames({ row: true, active: isReaderMode })}\r\n              onClick={() => handleReaderModeClick()}\r\n              dataElement=\"readerPageTransitionButton\"\r\n            >\r\n              <Button\r\n                title=\"option.pageTransition.reader\"\r\n                img=\"icon-header-page-manipulation-page-transition-reader\"\r\n                isActive={isReaderMode}\r\n                role=\"option\"\r\n              />\r\n              <div className=\"title\">{t('option.pageTransition.reader')}</div>\r\n            </DataElementWrapper>\r\n          )}\r\n          {!isReaderMode && (\r\n            <DataElementWrapper\r\n              dataElement=\"viewControlsDivider1\"\r\n              className=\"divider\"\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n      {!isReaderMode && (\r\n        <>\r\n          <DataElementWrapper\r\n            dataElement=\"rotateHeader\"\r\n            className=\"type\"\r\n          >\r\n            {t('action.rotate')}\r\n          </DataElementWrapper>\r\n          <DataElementWrapper className=\"row\" onClick={() => core.rotateClockwise(activeDocumentViewerKey)} dataElement=\"rotateClockwiseButton\">\r\n            <ActionButton\r\n              title=\"action.rotateClockwise\"\r\n              img=\"icon-header-page-manipulation-page-rotation-clockwise-line\"\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('action.rotateClockwise')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper className=\"row\" onClick={() => core.rotateCounterClockwise(activeDocumentViewerKey)} dataElement=\"rotateCounterClockwiseButton\">\r\n            <ActionButton\r\n              title=\"action.rotateCounterClockwise\"\r\n              img=\"icon-header-page-manipulation-page-rotation-counterclockwise-line\"\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('action.rotateCounterClockwise')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            dataElement=\"viewControlsDivider2\"\r\n            className=\"divider\"\r\n          />\r\n          <DataElementWrapper\r\n            dataElement=\"layoutHeader\"\r\n            className=\"type\"\r\n          >\r\n            {t('option.displayMode.layout')}\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: layout === 'single' })}\r\n            onClick={() => handleClick(pageTransition, 'single')}\r\n            dataElement=\"singleLayoutButton\"\r\n          >\r\n            <Button\r\n              title=\"option.layout.single\"\r\n              img=\"icon-header-page-manipulation-page-layout-single-page-line\"\r\n              isActive={layout === 'single'}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.layout.single')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: layout === 'double' })}\r\n            onClick={() => handleClick(pageTransition, 'double')}\r\n            dataElement=\"doubleLayoutButton\"\r\n          >\r\n            <Button\r\n              title=\"option.layout.double\"\r\n              img=\"icon-header-page-manipulation-page-layout-double-page-line\"\r\n              isActive={layout === 'double'}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.layout.double')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: layout === 'cover' })}\r\n            onClick={() => handleClick(pageTransition, 'cover')}\r\n            dataElement=\"coverLayoutButton\"\r\n          >\r\n            <Button\r\n              title=\"option.layout.cover\"\r\n              img=\"icon-header-page-manipulation-page-layout-cover-line\"\r\n              isActive={layout === 'cover'}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.layout.cover')}</div>\r\n          </DataElementWrapper>\r\n          {showCompareButton && (\r\n            <DataElementWrapper\r\n              className={classNames({ row: true, active: isMultiViewerMode })}\r\n              onClick={toggleCompareMode}\r\n              dataElement=\"toggleCompareModeButton\"\r\n            >\r\n              <Button\r\n                title=\"action.comparePages\"\r\n                img=\"icon-header-compare\"\r\n                isActive={isMultiViewerMode}\r\n                role=\"option\"\r\n              />\r\n              <div className=\"title\">{t('action.sideBySideView')}</div>\r\n            </DataElementWrapper>\r\n          )}\r\n        </>\r\n      )}\r\n      {renderFullScreenToggle()}\r\n    </FlyoutMenu>\r\n  );\r\n}\r\n\r\nexport default ViewControlsOverlay;\r\n","import ViewControlsOverlay from './ViewControlsOverlay';\r\n\r\nexport default ViewControlsOverlay;"],"names":["_core$getDocument","t","_slicedToArray","useTranslation","store","useStore","_useSelector2","useSelector","state","selectors","getTotalPages","getDisplayMode","isElementDisabled","DataElements","VIEW_CONTROLS_OVERLAY","isReaderMode","isMultiViewerMode","isFullScreen","getActiveDocumentViewerKey","getIsMultiTab","getIsMultiViewerModeAvailable","totalPages","displayMode","isDisabled","activeDocumentViewerKey","isMultiTab","isMultiViewerModeAvailable","isPageTransitionEnabled","documentViewer","core","getDocumentViewer","displayModeManager","getDisplayModeManager","isVirtualDisplayEnabled","pageTransition","layout","showCompareButton","isIE11","handleClick","setDisplayMode","displayModeObject","displayModeObjects","find","obj","exitReaderMode","setTimeout","showReaderButton","isFullPDFEnabled","getDocument","getType","React","FlyoutMenu","menu","trigger","VIEW_CONTROLS_OVERLAY_BUTTON","ariaLabel","DataElementWrapper","dataElement","className","classNames","row","active","onClick","Button","title","img","isActive","role","enterReaderMode","rotateClockwise","ActionButton","rotateCounterClockwise","dispatch","actions","setIsMultiViewerMode","isIOS","isIOSFullScreenSupported","toggleFullscreen"],"sourceRoot":""}