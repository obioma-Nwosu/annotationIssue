{"version":3,"file":"chunks/9719.chunk.js","mappings":"+3CA+CA,MC7CA,EDQA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACVC,EAAqBC,GAAhBC,EAAAA,EAAAA,KAAgB,GAApB,GACDC,EAELF,GAFgCG,EAAAA,EAAAA,KAAY,SAACC,GAAK,MAAK,CACvDC,EAAAA,EAAUC,2BAA2BF,GACtC,IAAC,GAF4B,GAa9B,OACEG,EAAAA,cAACC,EAAAA,EAAU,CACTC,KAAMC,EAAAA,EAAaC,aACnBC,QAASF,EAAAA,EAAaG,oBACtBC,UAAWf,EAAE,0BAEbQ,EAAAA,cAACQ,EAAAA,EAAW,CACVC,UAAUb,EAAAA,EAAAA,IAAYE,EAAAA,EAAUY,aAChCC,kBAAkBf,EAAAA,EAAAA,IAAYE,EAAAA,EAAUc,SACxCC,cAAcjB,EAAAA,EAAAA,IAAYE,EAAAA,EAAUe,cACpCC,oBAAkE,qBAA7ClB,EAAAA,EAAAA,IAAYE,EAAAA,EAAUiB,mBAC3CC,6BAA6BpB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKC,EAAAA,EAAUmB,kBAAkBpB,EAAO,oBAAoB,IAC3GqB,WAAY,kBAAMA,EAAAA,EAAAA,IAAWvB,EAAwB,EACrDwB,UAAW,kBAAMA,EAAAA,EAAAA,IAAUxB,EAAwB,EACnDyB,uBAvBN,SAAgCC,IAC9BC,EAAAA,EAAAA,IAAOD,GACP/B,EAASiC,EAAAA,EAAQC,cAAc,CAACrB,EAAAA,EAAaC,eAC/C,EAqBMqB,mBAnBN,WACEnC,EAASiC,EAAAA,EAAQC,cAAc,CAACrB,EAAAA,EAAaC,eAC/C,IAqBF,C","sources":["webpack://webviewer-ui/./src/components/ZoomOverlay/ZoomOverlayContainer.js","webpack://webviewer-ui/./src/components/ZoomOverlay/index.js"],"sourcesContent":["import React from 'react';\r\nimport actions from 'actions';\r\nimport selectors from 'selectors';\r\nimport { zoomTo, fitToPage, fitToWidth } from 'helpers/zoom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FlyoutMenu from 'components/FlyoutMenu/FlyoutMenu';\r\nimport ZoomOverlay from './ZoomOverlay';\r\nimport DataElements from 'src/constants/dataElement';\r\n\r\nfunction ZoomOverlayContainer() {\r\n  const dispatch = useDispatch();\r\n  const [t] = useTranslation();\r\n  const [activeDocumentViewerKey] = useSelector((state) => [\r\n    selectors.getActiveDocumentViewerKey(state),\r\n  ]);\r\n\r\n  function onClickZoomLevelOption(zoomLevel) {\r\n    zoomTo(zoomLevel);\r\n    dispatch(actions.closeElements([DataElements.ZOOM_OVERLAY]));\r\n  }\r\n\r\n  function onClickMarqueeZoom() {\r\n    dispatch(actions.closeElements([DataElements.ZOOM_OVERLAY]));\r\n  }\r\n\r\n  return (\r\n    <FlyoutMenu\r\n      menu={DataElements.ZOOM_OVERLAY}\r\n      trigger={DataElements.ZOOM_OVERLAY_BUTTON}\r\n      ariaLabel={t('component.zoomOverlay')}\r\n    >\r\n      <ZoomOverlay\r\n        zoomList={useSelector(selectors.getZoomList)}\r\n        currentZoomLevel={useSelector(selectors.getZoom)}\r\n        isReaderMode={useSelector(selectors.isReaderMode)}\r\n        isMarqueeZoomActive={useSelector(selectors.getActiveToolName) === 'MarqueeZoomTool'}\r\n        isMarqueeToolButtonDisabled={useSelector((state) => selectors.isElementDisabled(state, 'marqueeToolButton'))}\r\n        fitToWidth={() => fitToWidth(activeDocumentViewerKey)}\r\n        fitToPage={() => fitToPage(activeDocumentViewerKey)}\r\n        onClickZoomLevelOption={onClickZoomLevelOption}\r\n        onClickMarqueeZoom={onClickMarqueeZoom}\r\n      />\r\n    </FlyoutMenu>\r\n  );\r\n}\r\n\r\nexport default ZoomOverlayContainer;\r\n","import ZoomOverlay from './ZoomOverlayContainer';\r\n\r\nexport default ZoomOverlay;\r\n"],"names":["dispatch","useDispatch","t","_slicedToArray","useTranslation","activeDocumentViewerKey","useSelector","state","selectors","getActiveDocumentViewerKey","React","FlyoutMenu","menu","DataElements","ZOOM_OVERLAY","trigger","ZOOM_OVERLAY_BUTTON","ariaLabel","ZoomOverlay","zoomList","getZoomList","currentZoomLevel","getZoom","isReaderMode","isMarqueeZoomActive","getActiveToolName","isMarqueeToolButtonDisabled","isElementDisabled","fitToWidth","fitToPage","onClickZoomLevelOption","zoomLevel","zoomTo","actions","closeElements","onClickMarqueeZoom"],"sourceRoot":""}